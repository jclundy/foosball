Feb 27-28
Progress
- added supervisor node
- saves calibration from startup node
- uses the max and min positions of the linear rail to reduce speed in the open loop node
Next steps
- automatically start supervisor and startup node from launch file
- once startup calibration is complete automatically enter open loop node
- tune speed control to work well with higher max speed
- add kick function

Dec 31 2021

Progress
- added logic to switch b/t speed and position mode for arduino's stepper driver
- added logic to center the carriage after running the startup routine

Next steps
- implement 'open loop' controller using hand controller or mouse/keyboard inputs

Minor improvements to make
- use custom message - int16 tuple; easy to implement on Ubuntu side, not sure how to implement arduino side
- as follow up to above, have generic 'setSpeed' and 'setPosition' commands, use motor id, likewise use tuple for 'limitReached' message
- take in command line arguments for startupNode - default speed
- read in new command lines - r for restart


Dec 29 2021
Todo
- implement logic to reset linear motor steps (need to edit arduino logic too)
- implement logic to go to position (need to edit arduino logic too)

- once the above is done, work on logic for 'open loop' control mode using hand controller or mouse/keyboard inputs

Progress
- relearned how to implement & build a ros node
- implemented node to run a startup routine driving the carriage forward and backwards
Dec 6th 2021
Next steps

1. Startup routine

Arduino side:
- arduino should startup in STANDBY_MODE
- should listen for CALIBRATION_MODE command
-- listen to speed command
-- listen for 'set steps'
void AccelStepper::setCurrentPosition 	( 	long  	position	) 	

ROS side
- implement ros node in c
- refresh on how to setup c project and compile
-- maybe see if this is easy to do in python?
- listen for linear position
- send set speed command
- send set steps command                                                                                                                                                                                                                                                                                            

2. Ball tracking
- do test with live ball tracking
- look into way to measure latency
- test other tracking methods - get file to compile
- implement ros node in c

3. Manually control speed with low latency
- implement ros node in c
- mouse and keyboard inputs?  

4. ball motion tracking
- implement ball state estimation node
- 
- make linear motor follow ball position

5. use aruco markers for board limits
